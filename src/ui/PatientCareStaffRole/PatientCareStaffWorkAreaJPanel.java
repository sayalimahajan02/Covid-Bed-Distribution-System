/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.PatientCareStaffRole;

import Business.Authorization.PatientAuthorizationAdmin;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Hospital.Patient;
import Business.Hospital.PatientCareStaff;
import Business.Organization.Organization;
import Business.Status;
import Business.UserAccount.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Yash
 */
public class PatientCareStaffWorkAreaJPanel extends javax.swing.JPanel {
private static EcoSystem system;
    private static DB4OUtil dB4OUtil;
    private static JPanel userProcessorcontainer;
    private JPanel userProcessContainer;
    private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem business;
    private Status status;
    private PatientCareStaff patientCareStaffLogin;
    /**
     * Creates new form PatientCareStaffWorkAreaJPanel
     */
    public PatientCareStaffWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business, PatientCareStaff patientCareStaff) {
        initComponents();
         this.system = business;
        this.dB4OUtil = dB4OUtil;
        this.userProcessorcontainer = userProcessContainer;
    this.userProcessContainer=userProcessContainer;
    this.account=account;
    this.organization=organization;
    this.enterprise=enterprise;
    this.business=business;
    this.patientCareStaffLogin=patientCareStaffLogin;
    this.setSize(1680, 1050);
    populatePatientDetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientjTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btncomplete = new javax.swing.JButton();
        btnaccept = new javax.swing.JButton();
        btnback = new javax.swing.JButton();

        jLabel1.setText("Patient Care Staff WorkArea");

        patientjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Patient Phone Number", "Ambulance Number", "Driver Name", "Driver Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientjTable);

        jLabel2.setText("Patient and Ambulance Assigned");

        btncomplete.setText("Complete");
        btncomplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncompleteActionPerformed(evt);
            }
        });

        btnaccept.setText("Accept and Proceed");
        btnaccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnacceptActionPerformed(evt);
            }
        });

        btnback.setText("<<Back");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(btnback)
                        .addGap(172, 172, 172)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 275, Short.MAX_VALUE)
                .addComponent(btnaccept)
                .addGap(154, 154, 154)
                .addComponent(btncomplete, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(211, 211, 211))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnback)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btncomplete)
                    .addComponent(btnaccept))
                .addContainerGap(204, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btncompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncompleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patientjTable.getSelectedRow();
        if (patientjTable.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(null, "Please select one patient to confirm pickup!!");
            return;
        }
        Patient selectedPatient=system.getPatientDirectory().getPatientByID(Integer.parseInt((String)patientjTable.getValueAt(selectedRowIndex, 0)));
         if(selectedPatient.getPatientstatus().equals(status.PatientDrop.getValue())){
         selectedPatient.setPatientstatus(status.Completed.getValue());
         }
         else{
             JOptionPane.showMessageDialog(null, "Please select patient with confirmed pickup!!");
            return;
         } 
    }//GEN-LAST:event_btncompleteActionPerformed

    private void btnacceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnacceptActionPerformed
int selectedRowIndex = patientjTable.getSelectedRow();
        if (patientjTable.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(null, "Please select one patient to confirm pickup!!");
            return;
        }
        Patient selectedPatient=system.getPatientDirectory().getPatientByID(Integer.parseInt((String)patientjTable.getValueAt(selectedRowIndex, 0)));
         if(selectedPatient.getPatientstatus().equals(status.PatientPickup.getValue())){
         selectedPatient.setPatientstatus(status.AssignToMe.getValue());
         }
         else{
             JOptionPane.showMessageDialog(null, "Please select patient with confirmed pickup!!");
            return;
         }        // TODO add your handling code here:
    }//GEN-LAST:event_btnacceptActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnaccept;
    private javax.swing.JButton btnback;
    private javax.swing.JButton btncomplete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientjTable;
    // End of variables declaration//GEN-END:variables

    private void populatePatientDetails() {
         DefaultTableModel model = (DefaultTableModel) patientjTable.getModel();
        model.setRowCount(0);

        for(Patient patient : system.getPatientDirectory().getPatientDirectory()){
            if((patient.getAmbulancedriver().getId()!=0 || patient.getPrivatedriver().getId()!=0) && patient.getAmbulancedriver().getId()==patientCareStaffLogin.getPatientcarestaffID() && (patient.getPatientstatus().equals(status.PatientPickup.getValue()) || patient.getPatientstatus().equals(status.Allocated.getValue()) )){
                Object[] row=new Object[5];
                row[0]=patient.getLastname()+", "+patient.getFirstname();
                row[1]=patient.getPhonenumber();
                if(patient.getAmbulancedriver().getId()!=0)
                {
                row[2]=patient.getAmbulancedriver().getAmbulanceNumber();
                row[3]=patient.getAmbulancedriver().getDriverLastName()+", "+patient.getAmbulancedriver().getDriverFirstName();
                row[4]=patient.getAmbulancedriver().getPhoneNumber();
                }
                if(patient.getPrivatedriver().getId()!=0)
                {
                row[2]=patient.getPrivatedriver().getPrivateVehicleNumber();
                row[3]=patient.getPrivatedriver().getDriverLastName()+", "+patient.getPrivatedriver().getDriverFirstName();
                row[4]=patient.getPrivatedriver().getPhoneNumber();
                }
                model.addRow(row);
            }
        }
    }
}
