/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.AmbulanceDriverRole;

import Business.DB4OUtil.DB4OUtil;
import Business.Driver.AmbulanceDriver;
import Business.Driver.PrivateDriver;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Hospital.Patient;
import Business.Organization.AmbulanceDriverOrganization;
import Business.Organization.Organization;
import Business.Status;
import Business.UserAccount.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import ui.PatientCareStaffRole.*;

/**
 *
 * @author Yash
 */
public class AmbulanceDriverWorkAreaJPanel extends javax.swing.JPanel {

    private static EcoSystem system;
    private static DB4OUtil dB4OUtil;
    private static JPanel userProcessorcontainer;
    private JPanel userProcessContainer;
    private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private Status status;
    private AmbulanceDriver ambulanceDriverLogin;

    /**
     * Creates new form AmbulanceDriverWorkAreaJPanel
     */
    public AmbulanceDriverWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system, AmbulanceDriverOrganization ambulanceDriverOrganization, Enterprise enterprise, AmbulanceDriver ambulanceDriverLogin) {
        initComponents();
        this.system = system;
        this.dB4OUtil = dB4OUtil;
        this.userProcessorcontainer = userProcessContainer;
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.ambulanceDriverLogin = ambulanceDriverLogin;
        this.setSize(1680, 1050);
        populatePatientPickUpDetails();
    }

    public void populatePatientPickUpDetails() {

        DefaultTableModel model = (DefaultTableModel) patientjTable.getModel();
        model.setRowCount(0);

        for (Patient patient : system.getPatientDirectory().getPatientDirectory()) {
            if (patient.getAmbulancedriver().getId() != 0 && patient.getAmbulancedriver().getId() == ambulanceDriverLogin.getId() && (patient.getPatientstatus().equals(status.Allocated.getValue()) || patient.getPatientstatus().equals(status.PatientPickup.getValue()))) {
                Object[] row = new Object[7];
                row[0] = patient.getPatientID();
                row[1] = patient.getLastname() + ", " + patient.getFirstname();
                row[2] = patient.getHospital().getName(); //hospital details
                row[3] = patient.getStreetaddress() + ", " + patient.getCity() + ", " + patient.getZipcode();
                row[4] = patient.getPhonenumber();
                row[5] = patient.getPatientstatus();
                row[6] = patient.getHospital().getStreetaddress() + ", " + patient.getHospital().getCity() + ", " + patient.getHospital().getZipcode();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientjTable = new javax.swing.JTable();
        pickupButton = new javax.swing.JButton();
        dropButton = new javax.swing.JButton();

        patientjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Hospital Name", "Patient Address", "Phone Number", "Status", "Hospital Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                patientjTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(patientjTable);

        pickupButton.setText("Confirm PickUp");
        pickupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickupButtonActionPerformed(evt);
            }
        });

        dropButton.setText("Confirm Drop");
        dropButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(pickupButton)
                        .addGap(63, 63, 63)
                        .addComponent(dropButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pickupButton)
                    .addComponent(dropButton))
                .addContainerGap(197, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pickupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickupButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) patientjTable.getModel();
        int selectedRowIndex = patientjTable.getSelectedRow();
        if (patientjTable.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(null, "Please select one patient to confirm pickup!!");
            return;
        }
        Integer patientId = Integer.parseInt(model.getValueAt(selectedRowIndex, 0).toString());
        Patient selectedPatient = system.getPatientDirectory().getPatientByID(patientId);
        if (selectedPatient.getPatientstatus().equals(status.Allocated.getValue())) {
            selectedPatient.setPatientstatus(status.PatientPickup.getValue());
            model.setValueAt(status.PatientPickup.getValue(), selectedRowIndex, 5);
            JOptionPane.showMessageDialog(null, "Confirmed Patient Pickup!!");
        } else {
            JOptionPane.showMessageDialog(null, "Please select allocated patient to confirm pickup!!");
            return;
        }

    }//GEN-LAST:event_pickupButtonActionPerformed

    private void dropButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) patientjTable.getModel();

        int selectedRowIndex = patientjTable.getSelectedRow();
        if (patientjTable.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(null, "Please select one patient to confirm drop!!");
            return;
        }
        Integer patientId = Integer.parseInt(model.getValueAt(selectedRowIndex, 0).toString());
        Patient selectedPatient = system.getPatientDirectory().getPatientByID(patientId);
        if (selectedPatient.getPatientstatus().equals(status.PatientPickup.getValue())) {
            selectedPatient.setPatientstatus(status.PatientDrop.getValue());
            model.setValueAt(status.PatientDrop.getValue(), selectedRowIndex, 5);
            JOptionPane.showMessageDialog(null, "Confirmed Patient Drop!!");

        } else {
            JOptionPane.showMessageDialog(null, "Please select patient with Confirm pickup to drop pickup successfully!!");
            return;
        }
    }//GEN-LAST:event_dropButtonActionPerformed

    private void patientjTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientjTableMousePressed
        // TODO add your handling code here:
        System.out.println("SELECTED ROW::" + patientjTable.getSelectedRow());
    }//GEN-LAST:event_patientjTableMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dropButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientjTable;
    private javax.swing.JButton pickupButton;
    // End of variables declaration//GEN-END:variables
}
